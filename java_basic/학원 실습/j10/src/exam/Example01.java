package exam;

public class Example01 {
	public static void main(String[] args) {
		//클래스란?? 일종의 틀을 말하기도 함 예) 붕어빵 만들 떄 사용하는 붕어빵 틀 즉, 틀(클래스) 하나가 있으면 여러개의 붕어빵(인스턴스)를 만들 수 있다
		/*
		 * 절차지향
		 * - 물이 위에서 아래로 흐르듯 순차적으로 코드를 작성하는 방식
		 * - 객체지향보다 속도가 빠름
		 * - 유지보수가 어렵다(하나의 코드를 고치면 전체적으로 다 고쳐야할 수도 있음)
		 * 
		 * 객체지향(상속, 추상화, 캡슐화, 다형성)
		 * - 실생활에 보이는 모든것을 객체라고 함 예) 사람, 노트북 등등
		 * - 프로그램 구현에 필요한 객체를 파악하고 각각의 객체들의 역할이 무엇인지를 정의하여
		 *   객체간의 상호작용을 통해 프로그램을 만드는 방법
		 * - 상속, 캡슐화, 다형성의 특징으로 코드를 재사용하거나 확장하기 좋다 -> 그래서 유지보수가 쉽다는 뜻
		 * - 유지보수가 쉽다
		 * - 보안이 세다 -> 캡슐화의 특징 -> 캡슐화의 특징으로 실제로 구현되는 부분을 외부에 드러나지 않도록 은닉하여 보안성이 좋다
		 * - 설계가 힘들다
		 * - 속도가 느리다
		 * 
		 * *상속*
		 * - 부모클래스(상위클래스) 자식클래스(서브클래스)
		 * - 상위클래스의 기능을 자식클래스가 물려받을 수 있다. 또한 물려받은 걸 재정의해서 사용도 가능
		 * *캡슐화*
		 * - 실제로 구현되는 부분을 외부에 드러내지 않도록 하여 정보를 은닉(private)
		 * *다형성*
		 * - 하나의 클래스나 메소드가 다양한 방식으로 동작이 가능하다
		 * - 하나의 객체가 여러가지 타입을 가질 수 있는 것
		 * *추상화*
		 * - 구체적으로 정의하는 것이 아니라 필요한 정보만을 중심으로 간소화하는 것
		 * 
		 * 클래스(class)
		 * - 클래스 안에는 멤버변수, 생성자, 메소드가 있다
		 * - 일종의 틀 설계도 이러한 것들을 클래스라고 한다
		 * - 클래스로부터 만들어진 객체를 인스턴스라고 한다
		 * 
		 * 객체지향 프로그래밍 개발 단계
		 * 1. 클래스 설계 
		 * 2. 인스턴스화(클래스를 이용한 객체 생성)
		 * 3. 생성된 객체 사용
		 * 
		 * 클래스의 용도
		 * - 라이브러리(API)용 : 다른 클래스에서 사용할 목적으로 설계
		 * - 실행용 : 프로그램의 실행 -> main() 메소드를 제공하는 역할을 한다 
		 * 
		 */
		Student s1 = new Student(); //Student(Student 클래스에 있음) 클래스의 인스턴스
		Student s2 = new Student(); //Student(Student 클래스에 있음) 클래스의 인스턴스
		
		System.out.println(s1.toString());
		System.out.println(s2.toString());
	}
}
